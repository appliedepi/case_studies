---
output: html_document
editor_options: 
  chunk_output_type: console
---

```{r, echo=F}
pacman::p_load(
  rio,
  here,
  janitor,
  DT,
  tidyverse,
  googlesheets4,
  reactable
)
```

## Welcome to our Open Case Study Repository!

::: {.callout-important title="WEBSITE UNDER CONSTRUCTION"}
This is a draft version of this page. The content and URL will change.
:::


Here, you can practice technical and analytical skills with real-life scenarios. The case studies, shared by FETPs and health ministries, use training data that’s either generated or anonymized.

A case study is a fun, interactive way to learn—guiding you through scenarios with tasks and questions. You’ll find a variety of topics, skill levels, and diseases below, most of which take just a few hours to complete. Simply pick the one that fits you best and click to open it in your language!

For more information on how to use the case studies, click the [How-to
Guide](pages/instructions.html). 

```{r, echo = F, eval=T, message= F}

# Specify the URL of the Google Sheet
sheet_url <- "https://docs.google.com/spreadsheets/d/1wrZtM3XjUtbDXD7PVLOHdd-H92hq_-WAQoIpRatjhlc/edit?gid=598142358"

# Read the data from the Google Sheet
table_raw <- read_sheet(sheet_url)

# Replace the language column with clickable links using the `name` for URLs
table <- table_raw %>% 
  mutate(casestudy_identifier= if_else(publish=="yes",casestudy_identifier, "under_construction")) %>% 
  dplyr::mutate(
    og_language = language, 
    language = paste0('<a href="pages/', 
                      casestudy_identifier, '.html" target="_blank">', language, '</a>'))


# Group by unique_identifier, description, and group_identifier to combine languages
find_langs <- table %>% 
  dplyr::group_by(group_identifier) |>
  dplyr::summarize(language = paste(unique(language), collapse = ", "), 
                   .groups = 'drop')

# Final outout
output <- table %>% 
  select(group_identifier, name, key_word, creator, tool, country, scale, subject, `technical complexity`, `methodological complexity`) %>%   
  unique() %>% 
  left_join(find_langs, by = "group_identifier") %>% 
  select(name, language, key_word, creator, tool, subject, `technical complexity`, `methodological complexity`)
  # Removed country and scale, don't think it's that helpful

# Create table
reactable(output,
  columns = list(
    name = colDef(name = "Case Study name",
                  style = list(width = "300px", fontWeight = "bold"),
                  headerStyle = list(width = "300px")),
    language = colDef(name = "Language (links)", html = TRUE),
    key_word = colDef(name = "Key words",
                      style = list(width = "200px"),
                  headerStyle = list(width = "200px")),
    creator = colDef(name = "Creator"),
    tool = colDef(name = "Tool"),
    # country = colDef(name = "Location"),
    # scale = colDef(name = "Scale"),
    subject = colDef(name = "Subject"),
    `technical complexity` = colDef(name = "Technical Complexity", align = "center",
                  style = list(width = "150px"),
                  headerStyle = list(width = "150px")),
    `methodological complexity` = colDef(name = "Methodological Complexity", align = "center",
                  style = list(width = "150px"),
                  headerStyle = list(width = "150px"))
  ),
  defaultPageSize = 5,
  filterable = TRUE,
  sortable = TRUE,
  style = list(backgroundColor = "white", 
               color = "black", 
               fontFamily = "Arial",  
                fontSize = "17px",
               border = "1px solid #000"), # Blue background with white text),
  rowStyle = list(backgroundColor = "white", 
               color = "black", 
               fontFamily = "Arial",  
                fontSize = "14px"), # Blue background with white text),
)







```


```{r, echo = F, eval = F}

# Render the table with DT, making the 'Link' column clickable with custom text
datatable(table_cases, escape = FALSE, filter = "top", options = list(
  columnDefs = list(
    list(targets = 2, render = JS(
      "function(data, type, row, meta) {
        if(type === 'display') {
          var linkText = 'Link'; // Use the 'Name' column as the display text
          data = '<a href=\"' + data + '\">' + linkText + '</a>';
        }
        return data;
      }"
    ))
  )
), callback = JS("table.page.len(5).draw();"))

```

## About us

[**Applied Epi**](https://www.appliedepi.org/) is a nonprofit organisation and grassroots movement of frontline epis from around the world. We write in our spare time to offer this resource to the community. Your encouragement and feedback is most welcome:

-   Visit our [**website**](https://www.appliedepi.org/) and [**join our contact list**](https://docs.google.com/forms/d/e/1FAIpQLSdtk7Mg32lYQ3ucbIM-kIwIRxgRwDfG5TJHsVAbFjQ1i6fwiw/viewform?usp=send_form)

-   **contact\@appliedepi.org**, tweet [**\@appliedepi**](https://x.com/appliedepi), or [**LinkedIn**](https://www.linkedin.com/company/appliedepi/?originalSubdomain=it)

-   Submit issues to our **Github repository**