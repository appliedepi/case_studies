---
output: html_document
editor_options: 
  chunk_output_type: console
execute:
  warning: false
  error: false
format: 
  html: 
    css: webex.css
    include-after-body: webex.js
editor: 
  markdown: 
    wrap: 72
---

# Descriptive analysis of the 2022 Mpox outbreak in Europe {#sec-rpractical}

::: {.callout-note appearance="minimal" icon="false"}
**Tool**: R \| **Technical complexity**: Basic \| **Methodological
complexity**: Basic\
**Source:** ECDC EI Group (simulated data)\
**Prior knowledge required:** [R
basics](https://epirhandbook.com/en/new_pages/basics.html) (Using
Rstudio; R packages, functions and arguments, using pipes)
:::

For instructions on how to use our case studies, see our [How-to
Guide](pages/instructions.qmd_). We welcome feedback and suggestions via
[contact\@appliedepi.org](mailto:contact@appliedepi.org). You can also
discuss the case study or related concepts on the [Applied Epi
Community](https://community.appliedepi.org/).

\pagebreak

## Scenario

It is May 2022 and Mpox has just been reported for the first time across
5 countries in Europe: Countries "A", "B", "C", "D", and "E". You have
been requested to provide a basic descriptive analysis to the European
Centre for Disease Prevention and Control (ECDC).

You are given access to:

-   A dataset with aggregate case counts, submitted to ECDC by the five
    countries as part of routine European reporting
-   A linelist with cases, submitted by the five countries to ECDC for
    this particular analysis

Let's go!

## Objectives

In this case study you will:

1.  Explore different types of files and how they can be imported in R.
2.  Perform basic data cleaning, e.g., changing the variable type,
    recoding variables, aggregating and filtering.
3.  Perform a basic descriptive analysis using tables and graphs

## Step 1. Set up

### 1.1 Get started in RStudio

Start by setting up a reproducible and well-organized workflow. This
will make it easy to rerun your analysis whenever needed.

**Tasks:**

-   Set up an RStudio project
-   Set up clear sub-folders where your code, data, and outputs will go
-   Create an R script, or an R Markdown file if you prefer. Make sure
    the script purpose, date, and author are written as comments at the
    top.
-   Extra: Ensure your working language in RStudio is appropriate (e.g.
    English for this exercise)

<details>

<summary style="text-decoration: underline; color: darkgreen;">

`r fontawesome::fa("lightbulb", fill = "gold")` Click to read a hint

</summary>

</br>

-   Create a folder where all the work in this case study will go. For
    example, create 'mpox_analysis' on your computer desktop. Create
    your RStudio project to be based in this folder.

-   We suggest creating the following sub-folders: `scripts` (for your
    code), `data` (for your data), and `outputs` (for your analytical
    outputs).

</details>

<details>

<summary style="text-decoration: underline; color: red;">

`r fontawesome::fa("check", fill = "red")`Click to see a solution (try
it yourself first!)

</summary>

</br>

Create a folder (e.g. 'mpox_analysis' on your Desktop) for your work. To
create an Rstudio project in your new folder, click `New Project…` in
the top left of your R Studio, then `Existing Directory`, then `Browse`
to select your new folder. For more information, look at the [R
projects](https://epirhandbook.com/new_pages/r_projects.html) section of
the Epi R Handbook.

Start a new R script by clicking `New File…` in the top left of your R
Studio, then `R Script`. Save it immediately in the appropriate place,
e.g. in a 'scripts' subfolder of your R Project.

At the top of your new R script, write some essential information like
your name, the purpose of the file, and the date.

Your R locale determines the language and regional settings used for
things like date formats and translations. If your locale is different
from the language you want for your report (e.g., a French locale vs. an
English report), you can change it to English by running
`Sys.setlocale("LC_ALL", "English")`. Include this in your script if
needed, or skip it if your locale is usually appropriate. This is
explained in more detail in the [How-to Guide](pages/instructions.qmd_).

</details>

### 1.2 Install/load packages

Next in your R script, you need to install and load the necessary R
packages. This ensures that the functions you need are available for
your analysis.

You will need the following packages: `rio` (for importing data),
`janitor` (for cleaning data), `lubridate` (for cleaning dates), `skimr`
(for reviewing data), `epikit` (for epi-related tasks), `gtsummary` (for
presentation-ready tables), `apyramid` (for age-sex pyramids), and
`tidyverse` (for general data manipulation/science tasks).

As you start, your trusted colleague nudges you and whispers "I've heard
that a great way to manage your packages is with the `pacman` package".

Over to you!

<details>

<summary style="text-decoration: underline; color: red;">

`r fontawesome::fa("check", fill = "red")`Click to see a solution (try
it yourself first!)

</summary>

</br>

Use the function `p_load()` from `pacman` for this task. You provide the
function with a list of packages that you want to use. It will take two
steps per package: 1) Check if the package is installed on your
computer, and install it if necessary, then 2) Load the package so it
can be used during this R session.

If you don't already have `pacman` installed, you will need to install
it the "traditional way" first, with `install.packages()`.

Note that the order of packages in your p_load function can be
important. If two packages have the same function names (e.g. `select()`
in the package `MASS` and `select()` in `tidyverse`, which do different
things), then R will use the function from the most recently loaded
package. To prioritize functions from tidyverse, which are commonly used
for data manipulation and visualization, load tidyverse last.

</detail>

```{r, echo=TRUE, eval=TRUE}

# Ensures the package "pacman" is installed
if (!require("pacman")) {
     install.packages("pacman") }

# install (if necessary) from CRAN and load packages to be used
pacman::p_load(
  rio,        # importing data  
  skimr,      # get overview of data
  janitor,    # data cleaning and tables
  lubridate,  # working with dates
  epikit,     # to create age categories
  gtsummary,  # summary statistics, tests and regressions 
  apyramid,   # plotting age pyramids 
  tidyverse  # data management and visualization
)

```

## Step 2: Download and import the data

### 2.1: Download the data

ECDC provides you with two files for your analysis, both updated as of 31st August 2022:

-   A case-level linelist (*"mpox_linelist.xlsx"*) with case information
    from five countries (countries A - E)
-   An aggregate table (*"mpox_aggregate_table.csv"*) for those
    countries with cumulative case counts per day.

They provide it to you via AppliedEpi's very useful data repository,
which you can access using the `{appliedepidata}` package. So first you
need to download these two files to your own computer, as follows:

1)  Install the `{appliedepidata}` package from GitHub using the
    `install_github()` function in the `{remotes}` package. Install
    `{remotes}` if you need to first.

```{r , echo=TRUE, eval=FALSE}
# Install remotes if you need to (so you can install a package from GitHub)
pacman::p_load("remotes")

# Use the install_github function from remotes to install appliedepidata
remotes::install_github("appliedepi/appliedepidata")
```

2)  Save the two datasets into a specific folder using the `save_data()`
    function from `{appliedepidata}`, by running the code below. The
    example below saves the data into a 'data' subfolder within the
    RStudio project. Note that if you do not specify a location within
    the 'path' argument of the function, a window will pop up asking you
    to manually select a folder.

```{r , echo=TRUE, eval=FALSE}
# Save down the two mpox files using the save_data() function from appliedepidata
appliedepidata::save_data("mpox_linelist",
                        path = "data")

appliedepidata::save_data("mpox_aggregate_table",
                          path = "data")
```

### 2.2 Import the data

Great! Thanks ECDC and Applied Epi! Now it's time to import the data
from that folder into RStudio, so you can analyse it.

**Task:** Import the downloaded case-based and aggregated data into your
R environment. Ideally you want to use one function for both datasets,
despite one being a csv and the other an xlsx file.

<details>

<summary style="text-decoration: underline; color: darkgreen;">

`r fontawesome::fa("lightbulb", fill = "gold")` Click to read a hint

</summary>

</br>

Use the `import` function from the `{rio}` package, which can recognize
and import different file types. It replaces importing functions that
are specific to the file type, such as `read.csv()` from `{base}` for
.csv files and `read_excel()` from `{readxl}` to import .xlsx files.

If you feel you need to know more about importing functions, read the
[Import and export](https://epirhandbook.com/new_pages/importing.html)
chapter of the EpiRhandbook.

</details>

<details>

<summary style="text-decoration: underline; color: red;">

`r fontawesome::fa("check", fill = "red")`Click to see a solution (try
it yourself first!)

</summary>

Below we use the import function to bring in both files. Note how we are
assigning the imported data to two objects, one called
*mpox_linelist_raw*, and one called *mpox_agg_raw*. We add the 'raw'
suffix to distinguish this data from the cleaned versions we will make
later.

```{r , echo=TRUE, eval=FALSE}
# Import data  --------------

# Case-based data
mpox_linelist_raw <- import("data/mpox_linelist.xlsx")

# Aggregated data
mpox_agg_raw <- import("data/mpox_aggregate_table.csv")

```

```{r, include = FALSE}
# This code is actually run; the prior chunk is just for show for simplicity

pacman::p_load("remotes")

if (!requireNamespace("appliedepidata", quietly = TRUE)) {
  remotes::install_github("appliedepi/appliedepidata")
}

appliedepidata::get_data("mpox_linelist")
mpox_linelist_raw <- mpox_linelist


appliedepidata::get_data("mpox_aggregate_table")
mpox_agg_raw <- mpox_aggregate_table

rm(mpox_linelist, mpox_aggregate_table)

```

</details>

## Step 3: Explore the data

You need to understand what the data looks like as a first step, to
inform your analysis.

**Tasks:** Take a look at the different data frames and determine:

-   The number of columns and observations (e.g. their *dimensions*)
-   The class of their columns and whether it matches its nature (e.g.,
    are "dates" considered "dates" by R?)
-   If the contents of columns are clean and standardized in the mpox
    linelist (e.g. gender, clinical symptoms, outcome, hiv status and
    sexual orientation). Do you need to recode any of them?
-   How unknown or missing data is categorised in these columns. Do
    these values need to be standardized?

<details>

<summary style="text-decoration: underline; color: darkgreen;">

`r fontawesome::fa("lightbulb", fill = "gold")` Click to read a hint

</summary>

</br>

An efficient function for initial data exploring is `skim()` from the
`{skimr}` package, as it gives you a lot of information on data
structure and content, including the classes of columns.

You can use the function `tabyl()` from `{janitor}`, to get counts and
percentages of every category in the data column, one by one. These get
printed to your RStudio console.

Also - we recommend just looking at the data itself! A good function for
this is `view()`, a baseR function.

</br>

</details>

<details>

<summary style="text-decoration: underline; color: red;">

`r fontawesome::fa("check", fill = "red")`Click to see a solution (try
it yourself first!)

</summary>

</br>

Using the `skim` commands you can see the rows and columns of each
dataset, and you can see how most of the columns in *mpox_linelist_raw*
(including those containing dates) are character classes. (Results not
shown on this exercise page)

```{r , echo=TRUE, results='hide'}
# Explore the dimensions of the two data objects 
skim(mpox_linelist_raw)
skim(mpox_agg_raw)
```

Take a look at the overall data using `view()`. It will pop up in the
Data Viewer tab and you will get a good sense of how clean the data is
and what the missingness is like. This preview shows just 5 rows from
the linelist data.

```{r , echo=TRUE, results='hide'}
view(mpox_linelist_raw)
```

```{r , echo=FALSE, eval = TRUE}
#head(mpox_linelist_raw) %>% flextable::flextable()
DT::datatable(mpox_linelist_raw %>% filter(row_number()<6))
```

\br

Below is an example of using the `tabyl()` function from `{janitor},` to
look at the distribution of clinical symptoms. You can see 12 cases have
missing clinical information and that many cases have a mix of symptoms.

```{r , echo=TRUE}

tabyl(mpox_linelist_raw, HIVStatus)  
```

You can explore further columns one by one (results not shown):

```{r , echo=TRUE, results='hide'}
# Explore the values of different categorical columns in the mpox linelist: with tabyl
tabyl(mpox_linelist_raw, Gender)

tabyl(mpox_linelist_raw, ClinicalSymptoms)

tabyl(mpox_linelist_raw, Outcome)

tabyl(mpox_linelist_raw, SexualOrientation)

```

You could add extra arguments to `tabyl()` to customize the tables, such
as adding totals and changing the proportions to percentages so they are
easier to read. See the table on clinical symptoms below. But remember -
this is just an initial look so don't go too crazy.

```{r , echo=TRUE}

tabyl(mpox_linelist_raw, ClinicalSymptoms) %>%    # Tabulate symptoms 
  adorn_totals() %>%                              # Add totals to bottom of table
  adorn_pct_formatting(digits = 2)                # Format percentages
```

Finally, as an alternative approach to `tabyl()`, you could use
`tbl_summary()` from the `{gtsummary}` package. We will describe this
later.

</br>

</details>

::: {.callout-note appearance="minimal" icon="false"}
**Test yourself!**

::: webex-check
```{r, results="asis", echo=FALSE}
pacman::p_load(webexercises)

opts <- c(
  "2000", "13", answer = "3", "101"
)

cat("How many columns does the aggregated data have?", longmcq(opts))

```
:::

::: webex-check
```{r, results="asis", echo=FALSE}
pacman::p_load(webexercises)

opts <- c(
  "Date", answer = "Character", "Numeric", "Factor"
)


cat("What is the class of the column DateOfNotification in the mpox linelist?", longmcq(opts))

```
:::

::: webex-check
```{r, results="asis", echo=FALSE}
pacman::p_load(webexercises)

opts <- c(
  answer = "1168",
  "722",
  "900",
  "446"
)


cat("For how many cases is the HIV status Unknown or missing?", longmcq(opts))

```
:::
:::

## Step 4: Clean the data

### 4.1: Clean the case-based data

**Cleaning column names and values**

Great! From your exploration, you know that you can describe the
geographic distribution of cases by country, trends over time, their
demographic details, their sexual orientation and hiv status, plus their
outcome and clinical symptoms.

You plan to make some tables and graphs to describe those variables.

BUT! You may noticed that there are a few things that you need to clean
up before really diving into the analysis.

For example:

-   Column names have capital letters. This isn't outright a problem,
    but can lead to mistakes since R treats ColumnName and Columnname as
    different.
-   Date columns are recognized as character classes, not dates, which
    would cause issues like incorrect ordering (alphabetical) in
    epicurves.
-   Some columns have values that are unclear or unsuitable for
    presentation. For example gender is categorized with "F", "M", "O"
    and "UNK". The column Outcome is "A" and "UNK".
-   Missing data is inconsistently handled, for instance with both "UNK"
    and NA in the HIV status column. R thinks "UNK" is a valid value,
    which it treats differently to true missing data (indicated by NA)

**Tasks**:

-   Create a clean version of your case-based data making all cleaning
    changes in a single piping command
-   Change all column names to lower case.
-   Convert all date columns to class "Date".
-   Recode "Gender" categories into: "Female", "Male", "Other", and
    "Unknown"
-   Recode "Outcome" categories into: "Alive" and "Unknown"
-   Recode HIV status into: "Positive", "Negative" and "Unknown"
-   Recode Sexual orientation into: "Bisexual", "Heterosexual",
    "MSM/homo or bisexual male" and "Unknown".
-   Check that all changes have been made correctly

<details>

<summary style="text-decoration: underline; color: darkgreen;">

`r fontawesome::fa("lightbulb", fill = "gold")` Click to read a hint

</summary>

</br>

To convert all column names to lower case at once rather than renaming
each column, use the function `clean_names()` from the `{janitor}`
package.

Use `{lubridate}` functions to transform date columns into "Date" class.
You can do this one by one, or you could do all at the same time using
the `across()` function from `{dplyr}.` If you feel you need to know
more about transforming dates read the chapter [Working with
Dates](https://epirhandbook.com/en/new_pages/dates.html) from the
EpiRhandbook. If you are not sure how to use the across() function, you
can also read the section on [Transform multiple
columns](https://epirhandbook.com/en/new_pages/cleaning.html#clean_across).

There are different functions that we can use to recode values. We
propose three: The function `recode()` from `{dplyr}`, the function
`ifelse()` from `{base}` and the function `case_when()` from `{dplyr}`.
If you want to know more about these functions, look that the section on
[Re-code
values](https://epirhandbook.com/en/new_pages/cleaning.html#re-code-values)
from the EpiRhandbook.

</br>

</details>

<details>

<summary style="text-decoration: underline; color: red;">

`r fontawesome::fa("check", fill = "red")`Click to see a solution (try
it yourself first!)

</summary>

</br>

Here we clean the data using a 'chain' of commands connected by pipes
(%\>%), which is the grammar of the functions in the {Tidyverse}. The
output is assigned to a new object called mpox_linelist to differentiate
it from the raw data. It can be helpful to have both the cleaned and raw
data available in the environment to compare to the original data if
needed.

See the series of functions and the explanation in the comments.

```{r , echo=TRUE, results = 'hide'}

# Create a new object called mpox_linelist which is the clean version of the raw data
mpox_linelist <- mpox_linelist_raw %>% 
  
  # standardises names and puts all into lower case 
  clean_names() %>% 
  
  #transform ONE column into date (note the column names are lower case now)
  mutate(date_of_notification = ymd(date_of_notification)) %>%  

  #transforms ALL columns starting with "date" into dates
  mutate(across(starts_with("date"), 
                .fns = ~ ymd(.x))) %>%  
  

  # Recode the gender values to be more obvious  
  mutate(gender = recode(gender,
                         "F" = "Female",
                         "M" = "Male",
                         "O" = "Other",
                         "UNK" = "Unknown")) %>%
  
  #transforms UNK to Unknown across all character columns 
  mutate(across(where(is.character), 
                .fns = ~ ifelse(.x == "UNK", "Unknown", .x)))  %>% 
  
  #recode with ifelse to change only one or two categories based on a rule. 
  mutate(outcome = ifelse(outcome == "A", "Alive", outcome)) %>%   
  
  #recode with case_when for more complex recoding 
  mutate(hiv_status = case_when(hiv_status == "NEG" ~ "Negative",    
                                hiv_status == "POS" ~ "Positive",
                                TRUE                ~ "Unknown")) %>% 
  
  mutate(sexual_orientation = case_when(sexual_orientation == "BISEXUAL" ~ "Bisexual",
                                        sexual_orientation == "HETERO" ~ "Heterosexual",
                                        sexual_orientation == "MSM" ~ "MSM/homo or bisexual male",
                                        TRUE                        ~  "Unknown")) 
```

You can then review your data by tabulating across all the different
columns you have cleaned. See the preview of the HIV table below - it
looks tidier now with more understandable categories, and all missing
data is classified as 'Unknown'.

```{r , echo=TRUE, results = 'hide'}

# Check that all changes have been made correctly

skim(mpox_linelist)

tabyl(mpox_linelist, gender)

tabyl(mpox_linelist, clinical_symptoms)

tabyl(mpox_linelist, outcome)

tabyl(mpox_linelist, hiv_status)

tabyl(mpox_linelist, sexual_orientation)


```

```{r , echo=FALSE, eval= TRUE}

tabyl(mpox_linelist, hiv_status)

```

**IMPORTANT**: If 'unknown' and NA had meaningful differences, combining
them wouldn't be appropriate (e.g., 'unknown' means the case was asked
but didn't want to respond, while NA means they weren't asked). Here, we
assume no meaningful difference and combine them for simplicity.

</br>

</details>

::: {.callout-note appearance="minimal" icon="false"}
**Test yourself!**

::: webex-check
```{r, results="asis", echo=FALSE}
pacman::p_load(webexercises)

opts <- c(
  "Yes",
  answer = "Depends on the meaning of those values",
  "No - never do this"
)


cat("Is it always appropriate to combine different types of unknown data? (e.g. missing, unknown, did not respond, NA)", longmcq(opts))

```
:::

::: webex-check
```{r, results="asis", echo=FALSE}
pacman::p_load(webexercises)

opts <- c(
  "36",
  answer = "1960",
  "65",
  "1523"
)


cat("How many male cases do we have in the data frame?", longmcq(opts))

```
:::

::: webex-check
```{r, results="asis", echo=FALSE}
pacman::p_load(webexercises)

opts <- c(
  answer = "1405",
  "None",
  "595"
)

cat("How many cases have 'alive' as an outcome?", longmcq(opts))

```
:::
:::

**Creating new columns for analysis**

Fabulous, you're getting there. Now, because you plan to create weekly
epicurves and an age-sex pyramid, you need to ensure your data has the
right columns for this.

***Tasks:***

-   Use the column "DateOfNotification" to create a column called
    "week_date" which has the week of notification, starting on Mondays.

-   Create a column called "age_group" with ten year age groups and the
    oldest group being 70+

<details>

<summary style="text-decoration: underline; color: darkgreen;">

`r fontawesome::fa("lightbulb", fill = "gold")` Click to read a hint

</summary>

</br>

To create the age groups, explore the function called `age_categories()`
from the `{epikit}` package.

One simple way to create the "week_date" column would be to use the
function `floor_date()` from `{lubridate}`. Take a look at the
documentation to understand how it works and how to make Monday the
starting day of the week.

</br>

</details>

<details>

<summary style="text-decoration: underline; color: red;">

`r fontawesome::fa("check", fill = "red")`Click to see a solution (try
it yourself first!)

</summary>

</br>

Add the creation of these columns to your cleaning code:

```{r , echo=TRUE, results = 'hide'}

mpox_linelist <- mpox_linelist %>% 
  # create week column with Monday start 
  mutate(week_date = floor_date(date_of_notification, unit = "week", week_start = "Monday")) %>%
  
  # Use the age_categories function to create age categories
  mutate(age_group = age_categories(age, lower = 0, #set up the lower age
                                    upper = 70, #set up the upper age
                                    by = 10)) #set up the age breaks
```

</details>

::: {.callout-note appearance="minimal" icon="false"}
**Test yourself!**

::: webex-check
```{r, results="asis", echo=FALSE}
pacman::p_load(webexercises)

opts <- c(
  answer = "2022-04-11",
  "2022-07-25",
  "2022-02-28",
  "2022-05-09"
)


cat("Which week has the largest number of cases?", longmcq(opts))

```
:::
:::

### 4.2: Clean the aggregated data

In a similar way, clean the aggregated data by:

-   Standardising names to lower case
-   Ensuring that date of reporting is of class "Date"
-   Creating a column called "week_date" with the week of reporting
    starting on Monday

<details>

<summary style="text-decoration: underline; color: red;">

`r fontawesome::fa("check", fill = "red")`Click to see a solution (try
it yourself first!)

</summary>

</br>

We can first check the class of the DateRep column, which shows us that
it was already recognized as a date column on import.

```{r , echo=TRUE, results = 'hide'}

# Check class of date of reporting column
class(mpox_agg_raw$DateRep)

```

Then create a new object for the clean aggregate data, and write your
cleaning coded connected with pipes.

```{r , echo=TRUE, results = 'hide'}

# Create a new object called mpox_agg which is the clean version of the raw data, applying the cleaning functions

mpox_agg <- mpox_agg_raw %>% 
  
  # standardises names and puts all into lower case
  clean_names() %>%  
  
  # create week column with Monday start
  mutate(week_date = floor_date(date_rep, 
                              unit = "week",
                              week_start = "Monday")) 

```

</br>

</details>

::: {.callout-note appearance="minimal" icon="false"}
**Test yourself!**

::: webex-check
```{r, results="asis", echo=FALSE}
pacman::p_load(webexercises)

opts <- c(
  answer = "Country A",
  "Country B",
  "Country C",
  "Country D",
  "Country E"
)


cat("Take a look at the aggreate data. Which country reported the largest cumulative number of cases during the week 2022-04-11?", longmcq(opts))

```
:::
:::

## Step 5: Describe outbreak by person, place, and time

### 5.1: Describe total case counts by country

**Task**: Using the mpox case linelist, create a table showing the total
number of cases by country. This time, make the table more
publication-friendly.

<details>

<summary style="text-decoration: underline; color: darkgreen;">

`r fontawesome::fa("lightbulb", fill = "gold")` Click to read a hint

</summary>

</br>

You could use `tabyl()` like before, but an easy way to produce
publication-ready tables is with the function tbl_summary() from
{gtsummary} package. This formats the table for you. It will print to
your Viewer rather than the console.

</br>

</details>

<details>

<summary style="text-decoration: underline; color: red;">

`r fontawesome::fa("check", fill = "red")`Click to see a solution (try
it yourself first!)

</summary>

</br>

Create a new object with the table output - as this is a key output that you can then integrate into a document later rather than just viewing for now. 

```{r , echo=TRUE}
# Create an object with the table
cb_country_table <- mpox_linelist %>%

  #select the column that we want to use in the table
  select(country) %>% 
  
  # create the table. No need to specify columns; it will tabulate all available columns (selected above)
  tbl_summary() 

# Print the table
cb_country_table

```

</br>

</details>

::: {.callout-note appearance="minimal" icon="false"}
**Test yourself!**

::: webex-check
```{r, results="asis", echo=FALSE}
pacman::p_load(webexercises)

opts <- c(
  "Country C",
  "Country D",
  "Country B",
  "Country E",
  answer = "Country A"
)


cat("What country has the largest percentage of cases?", longmcq(opts))

```
:::
:::

### 5.2: Describe cases over time

Okay so Country A has the most cases in total based on most recent data. But how does that change look over time? 

**Tasks**:

-   Using the mpox case linelist, create an epicurve by week of
    notification
-   Using the mpox case linelist, create an epicurve by week of
    notification to enable a comparison of trends by country.
-   Using the mpox case linelist, create a heat plot with the number of
    cases by country and week of notification.

<details>

<summary style="text-decoration: underline; color: darkgreen;">

`r fontawesome::fa("lightbulb", fill = "gold")` Click to read a hint

</summary>

</br>

To do the epicurve, you can use ggplot() and geom_histogram(), which
will automatically aggregate your data. If you are unsure on how
ggplot() works, read the EpiRhandbook chapter on [Epidemic
curves](https://epirhandbook.com/en/new_pages/epicurves.html).

An alternative approach is to first aggregate the number of cases by
week of notification. You can do this using the functions group_by() and
summarise() from {dplyr}. If you are unsure on how to do this, review
the [Grouping data](https://epirhandbook.com/en/new_pages/grouping.html)
chapter of the EpiRhandbook.

Once you have an object with aggregated cases by week of notification,
create the epicurve using ggplot(). If want a dynamic colour inside the
bins, you need to assign the fill to the column you want to use
(country) and place it inside the aesthetics

Heat plots can be useful to understand how the epidemic evolved in
different countries. You will need to aggregate your data by country and
week of notification. You can do this using the functions group_by() and
summarise() from {dplyr}. If you are unsure on how to do this, review
the Grouping data chapter of the EpiRhandbook. Then, use the geom
geom_tile() to create a heat plot. If you're unsure on how to do this,
read the EpiRhanbook section on [Heat
Plots](https://epirhandbook.com/en/new_pages/heatmaps.html)

</details>

<details>

<summary style="text-decoration: underline; color: red;">

`r fontawesome::fa("check", fill = "red")`Click to see a solution (try
it yourself first!)

</summary>

</br>

The code below creates an epicurve using ggplot() and the geom_bar() function and applies further formatting. You can plug in the column you created during the data cleaning step for the x axis. With geom_bar(), you do not need to specify the y axis as the function counts the number of rows per x axis value. 

```{r , echo=TRUE}

# Open up the plot production with ggplot() function, specifying object and columns
epicurve_mpox <- ggplot(data = mpox_linelist,          
                        aes(x = week_date)) +    
  
  geom_bar(fill="darkgreen",                     #colour inside the bins
                 color="white",                  #outline colour of the bins
                 alpha=0.8) +                    #transparency of the bins
  
  scale_x_date(breaks = "2 weeks") +             #set the x axis labels to two week intervals

  labs(title="Mpox cases reported in 2022 in Countries A, B, C, D, and E",
       subtitle = "Date as of August 31st 2022") +  #add a title
  
  theme_bw() +                                  #assign a predefined theme
  
  theme(axis.text = element_text(size=9),       #define the font size of the axis text
        axis.title = element_blank(),           #remove the titles of the x and y axis 
        axis.text.x = element_text(angle=90))   #rotate the x axis text
           
# Print the epicurve
epicurve_mpox

```

To examine how the outbreak spread by country, add `facet_wrap()` to your ggplot code. This splits the graph into multiple smaller ones. Below, we show how we can even simply add the function to the national epicurve object. Alternatively, you could add fill = country to the aes() in the epicurve code to keep a single curve but color each bar by country. However, we don't recommend this for comparing trends, as stacked bars make it harder to see individual patterns.

```{r , echo=TRUE}
epicurve_epox_country <- epicurve_mpox + 
 
   # Facet wrap to make mini-plots, specifying that you want two columns of plots. 
  facet_wrap(.~country,
             ncol = 1) 

# Print the epicurve
epicurve_epox_country
```

```{r , echo=TRUE}

# Heatmap of cases by country over time

hp_epox <- mpox_linelist %>% #we first group the data by country and week of notification
  
  group_by(country, week_date) %>% 
  
  summarise(n_cases = n(), .groups = "drop") %>% 

  #now we can use the pipe to directly plot the resulting data from the grouping
  
  ggplot(aes(x = week_date,
           y = country,           #we want the countries to be in the y axis
           fill = n_cases)) +     #the colour of the tiles should depend on the number of cases
  
  geom_tile(colour = "black") +   #this is the outline colour of each tile
  
  scale_fill_gradient(            #here we define the colours we want to use in the gradient
    low = "lightgreen",
    high = "red") +
  
  scale_x_date(breaks = "2 weeks") +             #set the x axis labels to two week intervals
  
  labs(
    title= "Mpox cases by country and week of notification",
    fill = "Number of cases"                               
  ) +
  
  theme_bw() +
  
  theme(legend.position = "bottom",             #legend position to the bottom
        axis.text = element_text(size=9),       #define the font size of the axis
        axis.title = element_blank(),           #remove the titles of the x and y 
        axis.text.x = element_text(angle=90))   #rotate the x axis text
    
hp_epox 

```

</br>

</details>

### 5.3: Describe demographic characteristics

Now that we have created some outputs by time and place, we should focus
on the "person" element. The two most important demographic
characteristics are usually age and gender. In the case we are seeing,
we may also want to explore the sexual orientation of cases.

**Task**:

-   Explore the number of cases by age group and gender.
-   Create a table with number and percentages of cases by sexual
    orientation

<details>

<summary style="text-decoration: underline; color: darkgreen;">

`r fontawesome::fa("lightbulb", fill = "gold")` Click to read a hint

</summary>

</br>

The easiest way to explore both columns (age_group and gender) would be
to use the tabyl() function from {janitor}. Then, to create the age
pyramid explore the function age_pyramid() from the {apyramid} package.
You can find more about this function in the EpiRhandbook chapter
[Demographic pyramids and
Likert-scales](https://epirhandbook.com/en/new_pages/age_pyramid.html)

To create the table by sexual orientation, consider using the function
tbl_summary() from {gtsummary}

</br>

</details>

<details>

<summary style="text-decoration: underline; color: red;">

`r fontawesome::fa("check", fill = "red")`Click to see a solution (try
it yourself first!)

</summary>

</br>

```{r , echo=TRUE}
# Explore gender and age group columns
tabyl(mpox_linelist, gender)
tabyl(mpox_linelist, age_group)

# Table with sexual orientation 

tab_sor <- mpox_linelist %>% 
  
  select(sexual_orientation) %>% 
  
  tbl_summary(label = list(sexual_orientation ~ "Sexual Orientation")) 

tab_sor
```

</br>

</details>

::: {.callout-note appearance="minimal" icon="false"}
**Test yourself!**

::: webex-check
```{r, results="asis", echo=FALSE}
pacman::p_load(webexercises)

opts <- c(
  "Females 60-69",
  "Males 40-49",
  "Females 10-19",
  answer = "Males 30-39"
)


cat("Which demographic group is more affected by Mpox?", longmcq(opts))

```
:::
:::

### 5.4: Describe clinical characteristics

Now, let's summarise the main clinical information that we have in our
case-based data frame.

**Tasks**:

-   Create a bar plot with the proportion of each type clinical symptoms

-   Create a table with the number and percentage of cases by outcome

<details>

<summary style="text-decoration: underline; color: darkgreen;">

`r fontawesome::fa("lightbulb", fill = "gold")` Click to read a hint

</summary>

</br>

To create bar plots we can use geom_bar() or geom_col() depending on the
nature of our data. If we aggregate first, we can use geom_col(),
otherwise we should use geom_bar(). There is a function of the
{gtsummary} package called add_p() which enables you to easy calculate a
statistical test across groups. If you want to know more read the
section on [gtsummary
package](https://epirhandbook.com/en/new_pages/stat_tests.html#stats_gt)
of the EpiRhandbook.

</br>

</details>

<details>

<summary style="text-decoration: underline; color: red;">

`r fontawesome::fa("check", fill = "red")`Click to see a solution (try
it yourself first!)

</summary>

</br>

```{r , echo=TRUE}
# Bar plot with clinical symptoms

bar_clinical <- mpox_linelist %>% 
  
  drop_na(clinical_symptoms) %>%   # we remove those with missing clinical symptoms
  
  group_by(clinical_symptoms) %>% 
  
  summarise(n_cases = n(), .groups = "drop") %>%
  
  mutate(prop=(n_cases/sum(n_cases))*100) %>%  # we create a column with proportions
  
  ggplot(aes(y = reorder(clinical_symptoms, prop), x = prop)) +  # the reorder function ensures that categories are ordered by proportion in the graph
  
  geom_col(fill = "darkgreen") + 
  
  labs(
    title= "Frequency of clinical symptoms in Mpox cases",
    y = "",
    x = "Number of cases"
  ) +
  
  theme_bw() +
  
  theme(axis.text = element_text(size=9))       #define the font size of the axis

bar_clinical  


# Table with number and percentage of cases by outcome

tab_outcome <- mpox_linelist %>% 
  
  select(outcome) %>% 
  
  tbl_summary(label = list(outcome = "Reported outcome")) # with the argument "label" we can change how the column name is displayed

tab_outcome


```

</br>

</details>

## **Step 6: Reviewing data quality**

It is important to understand how timely, complete, and valid your data
is, if it will be the basis of understanding an outbreak and making
decisions. For example - you will need to be mindful of reporting delays
when interpreting epicurves, and be aware of how complete different
sources of data are compared to each other.

### 6.1: Delay between date of onset, diagnosis and notification

**Tasks**

-   Calculate median time from symptom onset to diagnosis and from
    diagnosis to notification, both overall and by country

-   Assess visually the number of cases by calendar period and type of
    date (onset, diagnosis and notification)

<details>

<summary style="text-decoration: underline; color: darkgreen;">

`r fontawesome::fa("lightbulb", fill = "gold")` Click to read a hint

</summary>

</br>

To plot together the different dates you may need to transform your data
from "wide" to "long" form. What we call "pivoting" in R. The objective
is to have a column with the different date categories (onset, diagnosis
and notification) and another column with their date value. If you are
unsure on how to do this, have a look at the [Pivoting
data](https://epirhandbook.com/en/new_pages/pivoting.html) chapter of
the EpiRhandbook. Then, try to plot with the daily values, but if that's
not easy to interpret you may want to aggregate cases by week.

</br>

</details>

::: {.callout-note appearance="minimal" icon="false"}
**Test yourself!**

::: webex-check
```{r, results="asis", echo=FALSE}
pacman::p_load(webexercises)

opts <- c(
  "Yes",
  answer = "No"
)


cat("Is there a difference in the delay from diagnosis to notification by country?", longmcq(opts))

```
:::
:::

<details>

<summary style="text-decoration: underline; color: red;">

`r fontawesome::fa("check", fill = "red")`Click to see a solution (try
it yourself first!)

</summary>

</br>

```{r , echo=TRUE}
# Estimate delay between onset and diagnosis, and between diagnosis and notification

delay_db <- mpox_linelist %>% 
  
  mutate(delay_diag = as.numeric(date_of_diagnosis - date_of_onset)) %>%   #we create variables with difference between dates, we transform them in numeric to be able to then calculate measures of central tendency
  
  mutate(delay_not = as.numeric(date_of_notification - date_of_diagnosis))

summary(delay_db$delay_diag) #the summary will give us measures of central tendency and dispersion
summary(delay_db$delay_not)


delay_country <- delay_db %>% #here, we group by country and summarise the median to compare across countries
  
  group_by(country) %>% 
  
  summarise(median_delay_diag = median(delay_diag, na.rm = T),
            median_delay_not = median(delay_not, na.rm = T))

delay_country

# Line graph with the different dates 

dates_longer <- mpox_linelist %>% # use the variables of the dates and make a longer dataset. In the pivot_longer() command we select the columns which we want to expand in long format and transform the dataset
   
  pivot_longer(
    
    cols=starts_with("date_"),         # all columns starting with "date_" will be taken 

    names_to = "indicator",            #the names of the columns will be placed in a single column called "indicator"

    values_to = "date")                # the values (which are dates in this case) will be placed in a column called "date"
  

dates_longer_week <- dates_longer  %>% 

  mutate(week_date = floor_date(date, unit = "week", week_start = "Monday")) %>%  # we create a week column
    
  group_by(indicator, week_date) %>% 
    
  summarise(n=n(), .groups="drop") %>%   # we group and summarise to have the number of cases by date type and week
    
  drop_na(week_date)                     # we drop the cases with no data on dates




plot_date_delay <-   ggplot(data = dates_longer_week,
                            aes(x = week_date, 
                                y = n, 
                                color=indicator)) +
  
  geom_line(linewidth = 1.5) +
  
  scale_x_date(breaks = "2 weeks")+
  
  theme_bw() +
  
  theme(legend.position = "bottom", 
        axis.text = element_text(size=9),
        axis.title = element_blank(),
        axis.text.x = element_text(angle=90),
        legend.title = element_blank()) +
  labs(title="Mpox cases reported in 2022, by date of onset, diagnosis and notification.")

plot_date_delay
```

</br>

</details>

### 6.2: Compare case-based and aggregated data

**Task**: Create a plot comparing the number of cases reported to
through the case-based flow and through the aggregated flow in each
country.

NOTE: Take into consideration that the column on cases in the aggregated
data frame reports the *cumulative* number of cases.

::: {.callout-note appearance="minimal" icon="false"}
**Test yourself!**

::: webex-check
```{r, results="asis", echo=FALSE}
pacman::p_load(webexercises)

opts <- c(
  "A",
  "B",
  answer = "C",
  "D",
  "E"
)


cat("Which country is not reporting aggregated data?", longmcq(opts))

```
:::
:::

<details>

<summary style="text-decoration: underline; color: red;">

`r fontawesome::fa("check", fill = "red")`Click to see a solution (try
it yourself first!)

</summary>

</br>

```{r , echo=TRUE}
# Create a data frame with the overall number of cases reported through the aggregated flux

mpox_agg_country <- mpox_agg %>% 
  
  group_by(country) %>% 
  
  filter(date_rep == max(date_rep)) %>% # as we have cumulative data, we keep only the last week (after grouping by country)
  
  select(-date_rep, -week_date) %>%     # remove unnecessary columns

  mutate(source = "aggregated")         # we create this column to distinguish the numbers from the case-based flux


# Create a data frame with the overall number of cases reported through the case-based flux

mpox_linelist_country <- mpox_linelist %>%
  
  group_by(country) %>% 
  
  summarise(cases = n(), .groups = "drop") %>% 
  
  mutate(source = "case_based")       # we create this column to distinguish the numbers from the
  

# We append both data frames. Remember this is different from merging

total_data <- bind_rows(mpox_linelist_country, mpox_agg_country)


# We create a graph to compare the cases reported in both sources

graph_comp <- ggplot(data = total_data,
                     aes(x = source, 
                         y = cases, 
                         fill = source)) +
  
  geom_col(position = "dodge") +            #position dodge puts bars one next to each other, instead of "stacked"
  
  facet_wrap(~ country, scales = "free_y") +  # this command gives us one graph per country. The argument scales is used to allow each y axis scales to adjust to the data

  scale_fill_viridis_d(
    labels = c("Aggregated", "Case-based")  # this function changes the colours, but with the argument "labels" we can change the text of each fill.
     ) +
  
  
  labs(
    title = "Number of cases of Mpox reported in 2022 according to source of data",
    fill = "Source",
    x = "",
    y = "Total number of cases"
  ) + 
  
  theme_bw() +
  
  theme(axis.text.x = element_blank(),      # we remove the text of the x axis because it is already present in the legend
        axis.ticks.x = element_blank())     # we also remove the ticks for aesthetic purposes

graph_comp
```

</br>

</details>

## Final thoughts

Well done! Through your analysis you now understand the magnitude of the
outbreak so far, where and when it spread, which demographic groups are
most affected, and how the disease actually manifests in terms of
symptoms and severity. ECDC is very happy with your work.

By coding this up in R, this analysis should be reproducible, meaning
you can quickly update it with new data and keep monitoring the
outbreak. To further practise reproducible reports, \[link to
RMarkdown\].

## Case study information

**Authorship**

Original authors: Xanthi Andrianou, Gianfranco Spiteri (ECDC EI Group)\
Data source: Fictional data provided by ECDC EI Group for training
purposes\

| Date         | Changes made                   | Version | Author                 |
|------------------|:------------------|-----------------:|------------------|
| October 2021 | First draft                    |       1 | Xanthi Andrianou       |
| June 2024    | Adapted to case study template |     1.1 | Alberto Mateo Urdiales |

**Terms of Use**

<!-- Describe the licencing and other appropriate information about Terms of use or any other disclaimer -->
