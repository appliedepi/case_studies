{
  "hash": "b5bc6aea166d559221cffe618ba3f7cc",
  "result": {
    "markdown": "---\noutput: html_document\neditor_options: \n  chunk_output_type: console\nformat: \n  html: \n    css: webex.css\n    include-after-body: webex.js\neditor: \n  markdown: \n    wrap: 72\nexecute:\n  warning: false\n  error: false\n---\n\n\n# Creating reports with R and MS Excel: a tutorial using the openxls2 package (EN) {.unnumbered}\n\n## Overview {.unnumbered}\n\n| **Case study characteristics** |                                                      |\n|---------------------------|:--------------------------------------------|\n| **Name:**                      | openxlsx2 tutorial                                   |\n| **Language:**                  | English                                              |\n| **Tools:**                     | R, MS Excel                                          |\n| **Location:**                  | N/A                                                  |\n| **Scale:**                     | N/A                                                  |\n| **Diseases:**                  | N/A                                                  |\n| **Keywords:**                  | R, Excel, Report, Export, Format, openxls2, Tutorial |\n| **Technical complexity:**      | Intermediate                                         |\n| **Methodological complexity:** | Intermediate                                         |\n\n***Authorship***\\\nOriginal authors: Leonel Lerebours and Alberto Mateo Urdiales\\\nData source: None (Example data will be generated with R)\\\n\n## Instructions\n\n### Getting Help\n\nThere are several ways to get help:\n\n1)  Look for the \"hints\" and solutions (see below)\n2)  Post a question in [Applied Epi\n    Community](www.community.appliedepi.org) with reference to this case\n    study\n\n### Hints and Solutions\n\nHere is what the \"helpers\" look like:\n\n<!--Note that this is the way of including hints and explanations to the solutions -->\n\n\n```{=html}\n<!--\nNOTE: Below is the hint (all within details tags collapsed)\n-->\n```\n\n<details>\n\n<summary style=\"text-decoration: underline; color: darkgreen;\">\n\n`<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 384 512\" style=\"height:1em;width:0.75em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:gold;overflow:visible;position:relative;\"><path d=\"M297.2 248.9C311.6 228.3 320 203.2 320 176c0-70.7-57.3-128-128-128S64 105.3 64 176c0 27.2 8.4 52.3 22.8 72.9c3.7 5.3 8.1 11.3 12.8 17.7l0 0c12.9 17.7 28.3 38.9 39.8 59.8c10.4 19 15.7 38.8 18.3 57.5H109c-2.2-12-5.9-23.7-11.8-34.5c-9.9-18-22.2-34.9-34.5-51.8l0 0 0 0c-5.2-7.1-10.4-14.2-15.4-21.4C27.6 247.9 16 213.3 16 176C16 78.8 94.8 0 192 0s176 78.8 176 176c0 37.3-11.6 71.9-31.4 100.3c-5 7.2-10.2 14.3-15.4 21.4l0 0 0 0c-12.3 16.8-24.6 33.7-34.5 51.8c-5.9 10.8-9.6 22.5-11.8 34.5H226.4c2.6-18.7 7.9-38.6 18.3-57.5c11.5-20.9 26.9-42.1 39.8-59.8l0 0 0 0 0 0c4.7-6.4 9-12.4 12.7-17.7zM192 128c-26.5 0-48 21.5-48 48c0 8.8-7.2 16-16 16s-16-7.2-16-16c0-44.2 35.8-80 80-80c8.8 0 16 7.2 16 16s-7.2 16-16 16zm0 384c-44.2 0-80-35.8-80-80V416H272v16c0 44.2-35.8 80-80 80z\"/></svg>`{=html} Click to read a hint\n\n</summary>\n\n</br>\n\nHere you will see a helpful hint!\n\n</br>\n\n</details>\n\n\n```{=html}\n<!--\nNOTE: Below is the solution (all within details tags collapsed)\n-->\n```\n\n<details>\n\n<summary style=\"text-decoration: underline; color: red;\">\n\n`<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:1em;width:0.88em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:red;overflow:visible;position:relative;\"><path d=\"M438.6 105.4c12.5 12.5 12.5 32.8 0 45.3l-256 256c-12.5 12.5-32.8 12.5-45.3 0l-128-128c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0L160 338.7 393.4 105.4c12.5-12.5 32.8-12.5 45.3 0z\"/></svg>`{=html}Click to see the solution\n\n</summary>\n\n</br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nebola_linelist %>% \n  filter(\n    age > 25,\n    district == \"Bolo\"\n  )\n```\n:::\n\n\nHere is more explanation about why the solution works.\n\n</br>\n\n</details>\n\n\n```{=html}\n<!--\nNOTE: End of solution\n-->\n```\n\n<!-- NOTE ABOUT SOLUTIONS: When using {webexercises} the solution will be automatically highlighted, so you can change (if appropriate) the feature \"Click here to see the solution\" to  \"Click here to see the explanation of the solution\" -->\n\n### Posting a question in the Community Forum\n\n... description here about posting in Community... TO BE COMPLETED BY\nAPPLIED EPI\n\n### Terms of Use\n\n-   You may use the tutorial to learn how to generate reports using R by\n    creating tables and exporting them in MS Excel for visualization\n    with the `openxlsx2` package, for educational purposes, and to apply\n    the learned techniques to your personal or professional projects.\n    This tutorial might be freely translated, copied, or distributed. No\n    warranty is made or implied for use of the software for any\n    particular purpose.\n\n### Feedback & suggestions\n\n-   You can write feedback and suggestions on this tutorial at the\n    [GitHub issues page](https://github.com/appliedepi/case_studies)\n-   Alternatively email us at:\n    [contact\\@appliedepi.org](mailto:contact@appliedepi.org)\n\n\\pagebreak\n\n### Version and revisions\n\n\n| Date    | Changes made | Version| Author| \n|---------|:-------------|-------:|-------|\n|July 2023 | First draft| 1.0 | Leonel Lerebours |\n|September 2024         |Revision first draft              |1.1        |Alberto Mateo Urdiales\n|         |              |        |\n#### Disclaimer\n\n-   The main focus of the tutorial is to use the core functions of the\n    `openxlsx2` up to the version 1.8. You must have install MS Excel\n    (or software equivalent like OpenOffice) to visualize the output\n    tables.\n\n-   The data for this tutorial will be generated randomly (any resemble\n    with real data is totally coincidence).\n\n\\pagebreak\n\n## Guidance\n\n### Objectives of this case study\n\nThe goal of this tutorial is to introduce you in the use of openxlsx2 to\nexport formatted tables in MS Excel.\n\n### Previous level of expertise assumed\n\n-   It is recommended to have intermediate R skills and have at least a\n    basic knowledge of `dplyr` (from tidyverse package) like pipe\n    operators and data wrangling. [Here some\n    reference](https://www.tidyverse.org/).\n\n-   Epidemiological experience (e.g., knowledge of how to design outputs\n    tables for reporting purpose)\n\n### Preparation for the case study\n\n-   Create a folder named \"openxls2_tutorial\" in your laptop\n\n-   Create an Rstudio project in the folder openxls2_tutorial. If you\n    are unsure on how to do that, read the EpiRhandbook on [R\n    projects](https://epirhandbook.com/en/new_pages/r_projects.html)\n\n-   You must have installed MS Excel (or software equivalent like\n    OpenOffice) in your laptop to visualize the output tables.\n\n# Background\n\n## Why use MS Excel for reporting ?\n\nExcel is one of the most popular softwares for data analysis, data\nvisualization and many other capabilities, since Excel's formatting\noptions allow users to adjust fonts, colors, borders, and alignment to\ncreate visually appealing reports. MS excel use is very common in many\nareas, including epidemiological tasks that involve creating reports.\n\nIn some ways, MS Excel -as other point-and-click tools- is easy to\nlearn, since it lets you \"interact\" with the data. For example, if we\nwant to do quick calculations and produce a summary table, or if we want\nto modify a graph and to compare it with other previous reports.\n\nIf you have experience working in routine reporting -such as working\nwith epidemiological surveillance-, probably you or a co-worker use or\nhave used at some point Excel or any other spreadsheet software like\nOpenOffice to present tables and summaries.\n\nHowever, even with all the great perks that Excel has, it is somewhat\nhard to automate a report with Excel even using a template with a\npre-designed format. Is also time consuming to edit a spreadsheet every\ntime you create a table or a graph (specially without knowledge of\nmacros) and prone to errors.\n\n## Automating a report in Excel with R using openxlsx2 package\n\nAs described in the CRAN\n[documentation](https://cran.r-project.org/web/packages/openxlsx2/openxlsx2.pdf)\nof the `openxlsx2` package the main purpose of this package is to\nsimplify the creation of 'xlsx' files by providing a high level\ninterface to writing, styling and editing worksheets.\n\nIn this short tutorial we are going to create and format a summary\nreport from scratch in R without touching Excel or any other spreadsheet\nsoftware.\n\n\n::: {.cell}\n\n:::\n\n\n# Tutorial\n\n## **Step 1: Getting ready**\n\n### Step 1.1: Create a new R script\n\nOnce you have created an Rproject inside the \"openxls2_tutorial\" folder\n(as specified in the second point of the section **Preparation for the\ncase study**). Create a new script with the name *openxls2_tutorial.R*\nand save it in the subfolder \"openxls2_tutorial\".\n\n### Step 1.2: Install/load packages\n\nAs you probably know, the first part of our script (besides including\n-commented- some information about the aim, author, date last updated\nand contact details) is to install and load packages. Fortunately, there\nis a package that does this task very effectively: {pacman}. The\nfunction p_load() from this package will install any packages listed not\nalready installed and will load them. If a listed package had already\nbeen installed, it will just load it. You can find more about\ninstalling/loading packages in the\n[Packages](https://epirhandbook.com/en/new_pages/basics.html#packages)\nsection of the EpiRhandbook.\n\nUsing this approach, try to install and load the following packages:\njanitor, openxlsx2 and tidyverse.\n\n<details>\n\n<summary style=\"text-decoration: underline; color: darkgreen;\">\n\n`<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 384 512\" style=\"height:1em;width:0.75em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:gold;overflow:visible;position:relative;\"><path d=\"M297.2 248.9C311.6 228.3 320 203.2 320 176c0-70.7-57.3-128-128-128S64 105.3 64 176c0 27.2 8.4 52.3 22.8 72.9c3.7 5.3 8.1 11.3 12.8 17.7l0 0c12.9 17.7 28.3 38.9 39.8 59.8c10.4 19 15.7 38.8 18.3 57.5H109c-2.2-12-5.9-23.7-11.8-34.5c-9.9-18-22.2-34.9-34.5-51.8l0 0 0 0c-5.2-7.1-10.4-14.2-15.4-21.4C27.6 247.9 16 213.3 16 176C16 78.8 94.8 0 192 0s176 78.8 176 176c0 37.3-11.6 71.9-31.4 100.3c-5 7.2-10.2 14.3-15.4 21.4l0 0 0 0c-12.3 16.8-24.6 33.7-34.5 51.8c-5.9 10.8-9.6 22.5-11.8 34.5H226.4c2.6-18.7 7.9-38.6 18.3-57.5c11.5-20.9 26.9-42.1 39.8-59.8l0 0 0 0 0 0c4.7-6.4 9-12.4 12.7-17.7zM192 128c-26.5 0-48 21.5-48 48c0 8.8-7.2 16-16 16s-16-7.2-16-16c0-44.2 35.8-80 80-80c8.8 0 16 7.2 16 16s-7.2 16-16 16zm0 384c-44.2 0-80-35.8-80-80V416H272v16c0 44.2-35.8 80-80 80z\"/></svg>`{=html} Click to read a hint\n\n</summary>\n\n</br>\n\nYou may end up using a long list of packages. Unfortunately different\npackages have functions with the same name. For example, the package\n{dplyr} (already installed with {tidyverse}) has a function called\nselect() which we frequently use to subset columns of a data frame. But\nother packages such as {MASS} do also have a function called select().\nThis could create headaches if you want to subset columns using dplyr's\nselect() but R thinks you're calling MASS's select() (we call this\nmasking - dplyr's select() is masked by MASS's select()). Given that you\nare more likely to use functions from {tidyverse}, ensure that this is\nthe last package in your p_load() list so that functions from\n{tidyverse} (including {dplyr} functions) will always \"prevail\".\n\n</br>\n\n</details>\n\n<details>\n\n<summary style=\"text-decoration: underline; color: red;\">\n\n`<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:1em;width:0.88em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:red;overflow:visible;position:relative;\"><path d=\"M438.6 105.4c12.5 12.5 12.5 32.8 0 45.3l-256 256c-12.5 12.5-32.8 12.5-45.3 0l-128-128c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0L160 338.7 393.4 105.4c12.5-12.5 32.8-12.5 45.3 0z\"/></svg>`{=html}Click to see a solution (try\nit yourself first!)\n\n</summary>\n\n</br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Ensures the package \"pacman\" is installed\nif (!require(\"pacman\")) {\n     install.packages(\"pacman\") }\n\n# install (if necessary) from CRAN and load packages to be used\npacman::p_load(\n  janitor,    # data cleaning and tables\n  openxlsx2,  # create xlsx files \n  lubridate,  # to manage dates\n  tidyverse  # data management and visualization\n)\n```\n:::\n\n\n</br>\n\n</details>\n\n## **Step 2: Create a fake dataset**\n\nBefore start using the functions of `openxlsx2`, we need to decide on\nwhat we want into the exported report (i.e., how many tables, what type\nof tables and which data inside.)\n\nFor this tutorial, the scenario is to do a summary of the **microbiology\nlaboratories' production**, including:\n\n-   how many samples were received\n\n-   how many were confirmed\n\n-   when the samples had a confirmed diagnosis\n\nWe will not be using real data for this tutorial, but we will create it\nwith R. Feel free to create it with MS Excel if you feel more\ncomfortable.\n\n**Task**: Generate a fake data frame of 1000 observations using the\nfollowing variables:\n\n-   **date:** from January 01, 2022 to December 31st, 2024.\n\n-   **laboratories:** a categorical variable with five categories that\n    have values from \"A\" to \"E\".\n\n-   **n_samples:** The Number of samples received. a numerical variable\n    (ramdon number from 0 to 100).\n\n-   **n_confirmed:** The Number of samples with positive results. A\n    numerical variable calculated as a proportion of the previous\n    variable, with a range that goes from 0.02 to 0.05.\n\n-   **pct_confirmed:** The percentage of samples confirmed\n    (n_samples/n_confirmed)\n\n<details>\n\n<summary style=\"text-decoration: underline; color: darkgreen;\">\n\n`<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 384 512\" style=\"height:1em;width:0.75em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:gold;overflow:visible;position:relative;\"><path d=\"M297.2 248.9C311.6 228.3 320 203.2 320 176c0-70.7-57.3-128-128-128S64 105.3 64 176c0 27.2 8.4 52.3 22.8 72.9c3.7 5.3 8.1 11.3 12.8 17.7l0 0c12.9 17.7 28.3 38.9 39.8 59.8c10.4 19 15.7 38.8 18.3 57.5H109c-2.2-12-5.9-23.7-11.8-34.5c-9.9-18-22.2-34.9-34.5-51.8l0 0 0 0c-5.2-7.1-10.4-14.2-15.4-21.4C27.6 247.9 16 213.3 16 176C16 78.8 94.8 0 192 0s176 78.8 176 176c0 37.3-11.6 71.9-31.4 100.3c-5 7.2-10.2 14.3-15.4 21.4l0 0 0 0c-12.3 16.8-24.6 33.7-34.5 51.8c-5.9 10.8-9.6 22.5-11.8 34.5H226.4c2.6-18.7 7.9-38.6 18.3-57.5c11.5-20.9 26.9-42.1 39.8-59.8l0 0 0 0 0 0c4.7-6.4 9-12.4 12.7-17.7zM192 128c-26.5 0-48 21.5-48 48c0 8.8-7.2 16-16 16s-16-7.2-16-16c0-44.2 35.8-80 80-80c8.8 0 16 7.2 16 16s-7.2 16-16 16zm0 384c-44.2 0-80-35.8-80-80V416H272v16c0 44.2-35.8 80-80 80z\"/></svg>`{=html} Click to read a hint\n\n</summary>\n\n</br>\n\nOne way to create the dataframe is to use the function `tibble()` which\ncomes when you install {tidyverse}. Inside `tibble()` you can create the\nspecified columns using the `sample()` function which will create values\nrandomly once you have specified the date rage, the categories etc. If\nyou are unsure on how to do this read the\n[documentation](https://tibble.tidyverse.org/) of the tibble function or\nthis post from [R\nbloggers](https://www.r-bloggers.com/2020/05/create-and-convert-tibbles/)\nwhich may help you. If you still do not manage, have a look at the\nsolution. Don't worry, this may be the most difficult part of the case\nstudy!\n\n</br>\n\n</details>\n\n<details>\n\n<summary style=\"text-decoration: underline; color: red;\">\n\n`<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:1em;width:0.88em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:red;overflow:visible;position:relative;\"><path d=\"M438.6 105.4c12.5 12.5 12.5 32.8 0 45.3l-256 256c-12.5 12.5-32.8 12.5-45.3 0l-128-128c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0L160 338.7 393.4 105.4c12.5-12.5 32.8-12.5 45.3 0z\"/></svg>`{=html}Click to see a solution (try\nit yourself first!)\n\n</summary>\n\n</br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# we first use this function which will ensure that, even though the dataframe will be generated with random values, we will ALWAYS get the same values if we rerun the script. The number inside is not relevant\n\nset.seed(1300) \n\n# Create dataframe for the example using 1000 observations\n\ndb <- tibble(\n  \n  # Random dates\n  \n   date=sample(seq(as.Date(\"2022-01-01\"),           # the begging of the period\n                  as.Date(\"2024-12-31\"),            # the end of the period\n                  by=\"day\"),                        # the time interval\n              replace = TRUE,                          # setting replace to true means that each date can be chosen to be in the sample more than once.\n              1000),                                # this is the number of observations\n  \n   # Random Labs (A to E)\n   \n   laboratories=sample(LETTERS[c(1:5)],             # we are saying that this columns should have letters from A (1) to E (5)       \n                      replace = TRUE, \n                      1000),\n  \n  # Random samples (by day and lab)\n  \n   n_samples=sample(c(1:100),                       \n                   replace = TRUE, \n                   1000)) %>% \n  \n  #Random confirmed samples\n  mutate(\n    \n    n_confirmed=round(sample(seq(                  # the round function is used to round numbers. In this case the multiplication may mean that we have decimals\n      from=0.01, \n      to=0.05, \n      by=0.001), \n      replace=T,\n      1000)*n_samples,\n      digits = 0),                                 # setting digits to 0 is saying to round it to the nearest whole number\n    \n    # % positivity\n    pct_confirmed=n_confirmed/n_samples       \n    \n    )\n\n#take a look at the db created\nhead(db)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 5\n  date       laboratories n_samples n_confirmed pct_confirmed\n  <date>     <chr>            <int>       <dbl>         <dbl>\n1 2024-09-04 B                   15           0        0     \n2 2023-02-27 C                   90           1        0.0111\n3 2023-06-02 A                   88           4        0.0455\n4 2023-02-19 B                    1           0        0     \n5 2024-06-15 D                   29           1        0.0345\n6 2022-06-24 C                   43           2        0.0465\n```\n:::\n:::\n\n\n</br>\n\n</details>\n\n`<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 64 512\" style=\"height:1em;width:0.12em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:red;overflow:visible;position:relative;\"><path d=\"M64 64c0-17.7-14.3-32-32-32S0 46.3 0 64V320c0 17.7 14.3 32 32 32s32-14.3 32-32V64zM32 480a40 40 0 1 0 0-80 40 40 0 1 0 0 80z\"/></svg>`{=html} **Note:** If you want\nto create a dummy database with Excel, (or you want to use your data)\nyou will have to import your file. To do that, you can use the function\n`import()` from the {rio} package or the function `read_xlsx()` from the\nopenxlsx2 package. Read the dedicated [EpiRhandbook\nChapter](https://epirhandbook.com/new_pages/importing.html) for\nimporting data if you have any doubts.\n\n## **Step 3: Transfoming the data and creating the summary tables**\n\nAs you can see, with this simple fake dataframe of 5 columns we may want\nto know :\n\n-   How many samples were reported by month each year.\n\n-   What is the proportion of the confirmed samples by month.\n\n-   What is the proportion of samples reported by each laboratory.\n\n-   The overall positivity rate by laboratory.\n\n### Step 3.1: Summary table with number of samples received\n\nLet's start by creating a table with the number of samples received by\nmonth each year. We want a table that has a nice formatting to put in a\nreport, so we want a column with the year of reporting and one column\nfor each calendar month. We also want to add the totals.\n\nWe will achieve this in to separate steps:\n\n**Task 1**: Aggregate the number of samples received (column\n*n_samples*) by month and year. Called the new column with the\naggregated number *tot_samples*\n\n<details>\n\n<summary style=\"text-decoration: underline; color: darkgreen;\">\n\n`<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 384 512\" style=\"height:1em;width:0.75em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:gold;overflow:visible;position:relative;\"><path d=\"M297.2 248.9C311.6 228.3 320 203.2 320 176c0-70.7-57.3-128-128-128S64 105.3 64 176c0 27.2 8.4 52.3 22.8 72.9c3.7 5.3 8.1 11.3 12.8 17.7l0 0c12.9 17.7 28.3 38.9 39.8 59.8c10.4 19 15.7 38.8 18.3 57.5H109c-2.2-12-5.9-23.7-11.8-34.5c-9.9-18-22.2-34.9-34.5-51.8l0 0 0 0c-5.2-7.1-10.4-14.2-15.4-21.4C27.6 247.9 16 213.3 16 176C16 78.8 94.8 0 192 0s176 78.8 176 176c0 37.3-11.6 71.9-31.4 100.3c-5 7.2-10.2 14.3-15.4 21.4l0 0 0 0c-12.3 16.8-24.6 33.7-34.5 51.8c-5.9 10.8-9.6 22.5-11.8 34.5H226.4c2.6-18.7 7.9-38.6 18.3-57.5c11.5-20.9 26.9-42.1 39.8-59.8l0 0 0 0 0 0c4.7-6.4 9-12.4 12.7-17.7zM192 128c-26.5 0-48 21.5-48 48c0 8.8-7.2 16-16 16s-16-7.2-16-16c0-44.2 35.8-80 80-80c8.8 0 16 7.2 16 16s-7.2 16-16 16zm0 384c-44.2 0-80-35.8-80-80V416H272v16c0 44.2-35.8 80-80 80z\"/></svg>`{=html} Click to read a hint\n\n</summary>\n\n</br>\n\nThere are different ways to aggregate data. We suggest you use the\nfunction `group_by()` alongside `summarise()`, which is a {dplyr}\napproach. If you have never used this approach or if you have doubts,\nread the this\n[section](https://epirhandbook.com/new_pages/grouping.html#group_summarise)\nof the EpiRhandbook. In any case, you'll need to create columns for the\nmonth and the year using the *date* column. You can do this using the\nfunctions `month()` and `year()`.\n\n</br>\n\n</details>\n\n<details>\n\n<summary style=\"text-decoration: underline; color: red;\">\n\n`<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:1em;width:0.88em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:red;overflow:visible;position:relative;\"><path d=\"M438.6 105.4c12.5 12.5 12.5 32.8 0 45.3l-256 256c-12.5 12.5-32.8 12.5-45.3 0l-128-128c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0L160 338.7 393.4 105.4c12.5-12.5 32.8-12.5 45.3 0z\"/></svg>`{=html}Click to see a solution (try\nit yourself first!)\n\n</summary>\n\n</br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#table for samples by year and months\n\n#table for samples by year and months\n\ntotal_sample_tab <- db %>% \n  \n  # we first create a column named months and years which are the respective months and years of the column \"date\"\n  \n  mutate(months = month(date,label=T), # the argument label = T ensures that months have the name of the month and not their number\n         years  = year(date)) %>% \n  \n  # we group by the new columns\n  group_by(years, months) %>% \n  \n  # and we create a new column by adding by each group the number of samples received\n  summarise(tot_samples = sum(n_samples), .groups = \"drop\") # the .groups = \"drop\" argument ungroup the data, which is always advisable after we finish aggregation\n\n\n\n#check the new data frame\nhead(total_sample_tab)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 3\n  years months tot_samples\n  <dbl> <ord>        <int>\n1  2022 Jan           1587\n2  2022 Feb           1439\n3  2022 Mar           1099\n4  2022 Apr            906\n5  2022 May           1378\n6  2022 Jun           1646\n```\n:::\n:::\n\n\n</br>\n\n</details>\n\nThe new dataframe has one column for years, one for months and one for\nthe total number of samples received. We call this the **long** format.\nThis format is useful for further analysis/visualisation (creating a\nplot), but here what we want is to export this into a nice formatted\ntable, so we want to the months to go in the columns. In other words, we\nwant our dataframe in a **wide** format.\n\n**Task 2**: Pivot your data from long to wide so that you have one\ncolumn per month. Add the totals.\n\n<details>\n\n<summary style=\"text-decoration: underline; color: darkgreen;\">\n\n`<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 384 512\" style=\"height:1em;width:0.75em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:gold;overflow:visible;position:relative;\"><path d=\"M297.2 248.9C311.6 228.3 320 203.2 320 176c0-70.7-57.3-128-128-128S64 105.3 64 176c0 27.2 8.4 52.3 22.8 72.9c3.7 5.3 8.1 11.3 12.8 17.7l0 0c12.9 17.7 28.3 38.9 39.8 59.8c10.4 19 15.7 38.8 18.3 57.5H109c-2.2-12-5.9-23.7-11.8-34.5c-9.9-18-22.2-34.9-34.5-51.8l0 0 0 0c-5.2-7.1-10.4-14.2-15.4-21.4C27.6 247.9 16 213.3 16 176C16 78.8 94.8 0 192 0s176 78.8 176 176c0 37.3-11.6 71.9-31.4 100.3c-5 7.2-10.2 14.3-15.4 21.4l0 0 0 0c-12.3 16.8-24.6 33.7-34.5 51.8c-5.9 10.8-9.6 22.5-11.8 34.5H226.4c2.6-18.7 7.9-38.6 18.3-57.5c11.5-20.9 26.9-42.1 39.8-59.8l0 0 0 0 0 0c4.7-6.4 9-12.4 12.7-17.7zM192 128c-26.5 0-48 21.5-48 48c0 8.8-7.2 16-16 16s-16-7.2-16-16c0-44.2 35.8-80 80-80c8.8 0 16 7.2 16 16s-7.2 16-16 16zm0 384c-44.2 0-80-35.8-80-80V416H272v16c0 44.2-35.8 80-80 80z\"/></svg>`{=html} Click to read a hint\n\n</summary>\n\n</br>\n\nOne way to do this is to use the function `pivot_wider()`. You need to\nspecify where the names of the columns will come from and where the\nvalues will come from. If you are not familiar with pivoting or if you\nhave doubts, spend some time in this\n[section](https://epirhandbook.com/new_pages/pivoting.html#long-to-wide)\nof the EpiRhandbook\n\n</br>\n\n</details>\n\n<details>\n\n<summary style=\"text-decoration: underline; color: red;\">\n\n`<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:1em;width:0.88em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:red;overflow:visible;position:relative;\"><path d=\"M438.6 105.4c12.5 12.5 12.5 32.8 0 45.3l-256 256c-12.5 12.5-32.8 12.5-45.3 0l-128-128c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0L160 338.7 393.4 105.4c12.5-12.5 32.8-12.5 45.3 0z\"/></svg>`{=html}Click to see a solution (try\nit yourself first!)\n\n</summary>\n\n</br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# pivoting from long to wide\ntotal_sample_tab <- total_sample_tab %>% \n  pivot_wider(names_from = months,        # so the names of the columns will be the months\n              values_from = tot_samples,  # and the values the number of samples\n              values_fill = 0) %>%        # if there were no data in a given month, it would fill it with 0\n  \n  adorn_totals(c(\"col\", \"row\"))           # we add the sum of the totals both by row and column\n\ntotal_sample_tab\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n years  Jan  Feb  Mar  Apr  May  Jun  Jul  Aug  Sep  Oct  Nov  Dec Total\n  2022 1587 1439 1099  906 1378 1646 1640  799  955 1422  976 1550 15397\n  2023 1391 1488 1390 1870 1236 1488 1737 1097 1320 1642 1581 1647 17887\n  2024 1339 1156 1526 1188 1274 1609 1455 1342 1974 1226 1626 1974 17689\n Total 4317 4083 4015 3964 3888 4743 4832 3238 4249 4290 4183 5171 50973\n```\n:::\n:::\n\n\n</br>\n\n</details>\n\n### Step 3.2: Summary table with positivity percentage\n\n**Task**: Following a similar approach to the one we used in the\nprevious step, create a table showing, by year and month, the positivity\npercentage of the samples\n\n<details>\n\n<summary style=\"text-decoration: underline; color: red;\">\n\n`<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:1em;width:0.88em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:red;overflow:visible;position:relative;\"><path d=\"M438.6 105.4c12.5 12.5 12.5 32.8 0 45.3l-256 256c-12.5 12.5-32.8 12.5-45.3 0l-128-128c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0L160 338.7 393.4 105.4c12.5-12.5 32.8-12.5 45.3 0z\"/></svg>`{=html}Click to see a solution (try\nit yourself first!)\n\n</summary>\n\n</br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\npositivity_tab <- db %>% \n  \n  # we first create a column named months and years which are the respective months and years of the column \"date\"\n  \n  mutate(months = month(date,label=T), # the argument label = T ensures that months have the name of the month and not their number\n         years  = year(date)) %>% \n  \n  # we group by the new columns\n  group_by(years, months) %>% \n  \n  # we create  new columns by adding by each group the number of samples received, the total confirmed and calcualte percentage\n  summarise(tot_samples = sum(n_samples),\n          tot_confirmed = sum(n_confirmed),\n          pct = round(tot_confirmed/tot_samples, digits = 5), .groups = \"drop\") %>% # round can be use to round up numbers. in this case to only 1 decimal\n  \n  #we select the columns we're interested\n  select(years, months, pct) %>% \n  \n  # we pivot them into wide format\n  pivot_wider(names_from = months,\n              values_from = pct, \n              values_fill = 0)\n\npositivity_tab\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 13\n  years    Jan    Feb    Mar    Apr    May    Jun    Jul    Aug    Sep    Oct\n  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>\n1  2022 0.0309 0.0285 0.0319 0.0342 0.0268 0.0316 0.0287 0.0263 0.0304 0.0267\n2  2023 0.0367 0.0289 0.0295 0.0267 0.0235 0.0343 0.0311 0.0228 0.0296 0.0311\n3  2024 0.0261 0.0294 0.0242 0.0295 0.0330 0.0311 0.0261 0.0276 0.0314 0.0286\n# ℹ 2 more variables: Nov <dbl>, Dec <dbl>\n```\n:::\n:::\n\n\n</br>\n\n</details>\n\n### Step 3.3: Summary table by laboratory\n\n**Task**: Create a summary table for each year and laboratory with the\ntotal number of samples, the number of samples confirmed and the\npositivity percentage, as well as the total by rows.\n\n<details>\n\n<summary style=\"text-decoration: underline; color: red;\">\n\n`<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:1em;width:0.88em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:red;overflow:visible;position:relative;\"><path d=\"M438.6 105.4c12.5 12.5 12.5 32.8 0 45.3l-256 256c-12.5 12.5-32.8 12.5-45.3 0l-128-128c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0L160 338.7 393.4 105.4c12.5-12.5 32.8-12.5 45.3 0z\"/></svg>`{=html}Click to see a solution (try\nit yourself first!)\n\n</summary>\n\n</br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlaboratory_summary <- db %>% \n  \n  # we first create a column named years which are the years of the column \"date\"\n  \n  mutate(years=year(date)) %>% \n  \n  # we group by year and laboratory \n  group_by(years, laboratories) %>% \n  \n  # we create new columns with the total number of samples received and the total number of samples confirmed\n  summarise(total_samples=sum(n_samples),\n          total_confirmed=sum(n_confirmed), .groups = \"drop\") %>% \n  \n  # we arrange our table by laboratory and year\n  arrange(laboratories, years) %>% \n  \n  # we add the totals by row\n  adorn_totals(\"row\") %>% \n  \n  # we add a column with the positivity percentage by row\n  mutate(positivity_rate= round(total_confirmed/total_samples, digits = 5)) %>% \n  \n  # we rename the columns\n  rename(\"Years of reporting\"=years,\n         \"Laboratories\"=laboratories,\n         \"Total Samples\"=total_samples,\n         \"Confirmed Samples\"=total_confirmed,\n         \"% of confirmed samples\"=positivity_rate)\n\nlaboratory_summary \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n Years of reporting Laboratories Total Samples Confirmed Samples\n               2022            A          4202               135\n               2023            A          3638                98\n               2024            A          3997               110\n               2022            B          2795                76\n               2023            B          3759               104\n               2024            B          3800               119\n               2022            C          2441                68\n               2023            C          3425               111\n               2024            C          3045                90\n               2022            D          2730                75\n               2023            D          2863                83\n               2024            D          3553               106\n               2022            E          3229               102\n               2023            E          4202               127\n               2024            E          3294                93\n              Total            -         50973              1497\n % of confirmed samples\n                0.03213\n                0.02694\n                0.02752\n                0.02719\n                0.02767\n                0.03132\n                0.02786\n                0.03241\n                0.02956\n                0.02747\n                0.02899\n                0.02983\n                0.03159\n                0.03022\n                0.02823\n                0.02937\n```\n:::\n:::\n\n\n</br>\n\n</details>\n\n## **Step 4: Export the tables to excel**\n\nNow that we have the tables for the summary report, lets do a overview\nof the main functions of openxlsx2 :\n\n### Main functions\n\n-   **wb_workbook()**: to create a new workbook\n\n-   **wb_add_worksheet()**: to add worksheets (name, zoom level and\n    gridlines)\n\n-   **wb_add_data()**: to add either a dataframe, a table, text string a\n    single value\n\n-   **wb_save()**: to export the workbook to a file (Excel format)\n\n-   **wb_open()**: really handy to open right away the workbook in Excel\n    (to see the results of the code)\n\n### Related to formating\n\n-   **wb_add_font()**: to specify font type for a region\n\n-   **wb_add_border()**: to add borders to a region\n\n-   **wb_add_cell_style()**: to add specific style to a region (wrap,\n    vertical/horizontal/left/right alignment,\n\n-   **wb_add_numfmt():** to add specific number style to a cells range\n\n-   **wb_add_fill()**: to add fill color to a region\n\n-   **wb_set_col_widths():** to setup the width of specific columns\n\n-   **wb_set_row_heights():** to setup the heights of specific rows\n\n-   **wb_merge_cells():** to merge a range of cells\n\nSome of the functions use parameters to specify coordinates in the\nspreadsheet numbers (as columns and row) and others use dimensions,\nwhich are the combination of letters for columns and number for letters.\n\n### Related to location / dimension / coordenates\n\nThe following functions are really important to get the coordinates of\nwhere to apply specific formatting, since most of the functions to add\nformat/style need a range (in row and columns). With these we can obtain\nExcel type coordinates of specify a region (such as A1:B30) based on the\nsize of the tables and the location in the worksheet of the table that\nwe want to export.\n\n**rowcol_to_dims():** to create a vector with Excel's coordinates from\nthe rows and columns numbers you provide (example: rowcol_to_dims(col=\nc(1:3), row= c(1:3)) will result in \"A1:C3\"). You can combine the use of\nnrow() and ncol() to get the size of a table and get the Excel's\ncoordinates, depending where you want to place the table. Is important\nto know beforehand the position of a table (number of row and column)\nsince the starting row and column so the format we want to apply fall in\nthe range we want.\n\n**wb_dims()**: to get a dimension of an object (dataframe or matrix) for\nthe spreadsheet. It start from coordinate A1 by default, for example if\nwe use wb_dims(x=mtcars) will return the value of \"A1:K33\". This helper\nfunction\n\n![General approach, you can create an example with all the formats in\nexcel first too](../images/openxlsx2_tut/icon1.png)\n\nNow that we have some dataframes and see a quick overview of the main or\nmost used functions from openxlsx, lets start to create the following\noutput in excel:\n\n![](../images/openxlsx2_tut/icon6.png)\n\nFirst lets see the \"style\" we want to add to the outputs and also the\ndimensions of the columns and rows where we want to apply a format. Like\nwe do when we work in Excel directly.\n\nFor example in the picture above we can observe the title in the middle\nof each tables is at the center and the text is larger and bold. The\nfirst row with the column's title has also bold text and has top and\nbottom borders. The last row, Total, has also bold text and has top\nbolder. In all of the cells the text is centered. In the top table the\ntext of the body is in number format and the last row too. In the bottom\ntable, the text of the body and last row are in percentage format.\n\nWe have to take into account these details to start creating the vectors\nwith the ranges. There are formats that applies for the whole table,\nothers for just part of the tables.\n\nAlso, it is very important to know where the tables are going to be\nlocated and if it is a table that is going to grow over time (from top\nto bottom or left to right).\n\n### Step 4.1: Set the table positions\n\nThe first column and row of the top table (Table with the total samples\nreceived) in the exercise have the starting position at **cell B3**,\nwhilst the bottom table (The positivity table) starts at **cell B10**.\n\nThe first row of the first table (Table with the total samples received)\ngoes from cell **B3 to cell O3**, the last row range is **B7 to O7**.\nFor the bottom table (The positivity table) the first row range is **B10\nto N10** and the bottom row is from **B14 to N14**.\n\nFor the vector with the ranges, we have to specify the columns as number\ninstead of letters. the `rowcol_to_dims()` function will convert the\nnumbers coordinates to the Excel range format (such as A1:B3). With the\ncombination of the function `ncol()` and `nrow()` and the starting\nposition we can get the range of the whole table.\n\n**Task**: Use the function `rowcol_to_dims()` to obtain the range of the\ncolumns for the *Table with the total samples received* (B3:07). Assign\nthis range to the name *tab1_dimres*. Get also the range for the same\ntable's title (B2:B2)\n\n<details>\n\n<summary style=\"text-decoration: underline; color: red;\">\n\n`<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:1em;width:0.88em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:red;overflow:visible;position:relative;\"><path d=\"M438.6 105.4c12.5 12.5 12.5 32.8 0 45.3l-256 256c-12.5 12.5-32.8 12.5-45.3 0l-128-128c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0L160 338.7 393.4 105.4c12.5-12.5 32.8-12.5 45.3 0z\"/></svg>`{=html}Click to see a solution (try\nit yourself first!)\n\n</summary>\n\n</br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#get the table 1 (Table with the total samples received) dimensions\n\ntab1_dimres <- rowcol_to_dims(\n  # 1:ncol() will give us the a range for the number of columns of the table. By adding one we are specifying that we want the range to start in B instead of A\n  \n  col = 1:ncol(total_sample_tab) + 1, \n  \n  # similarly 3:nrow() will create a range that starts in 3 and will go until nrow() + 3, whic is 7\n  row = 3:(nrow(total_sample_tab) + 3))\n\ntab1_dimtitle <- rowcol_to_dims(col = 2, row = 2)\n\n#get the first row and last row dimension of table 1 (Table with the total samples received)\ntab1_dimfirstrow<- rowcol_to_dims(col = 1:ncol(total_sample_tab)+1, row=3)\n\ntab1_dimlastrow <- rowcol_to_dims(col = 1:ncol(total_sample_tab)+1, row=nrow(total_sample_tab)+3)\n```\n:::\n\n\n</br>\n\n</details>\n\nSince the table1 (*Table with the total samples received*) is a table\nthat will grow over the time from top to bottom, the starting position\nof the table 2 (*The positivity table*) must depend on the starting\nposition of the first table, if we want to dinamically setup the\nstarting position of *The positivity table*.\n\nLets create a vector with the sequence of numbers of the rows where the\n*The positivity table* will be located based on the position of table 1\nand the spaces between *Table with the total samples received* and *The\npositivity table*.\n\n*Table with the total samples received* has 7 rows\n`nrow(total_sample_tab)` and the starting position in the spreadsheet is\nrow 3, and we want the second table starts two rows after the end of\ntable 1. So, the starting position row of table 2 is the sum of the\nnumbers of rows of table 1 + the starting position of table 1 + the rows\nafter table 1 last row.\n\n<details>\n\n<summary style=\"text-decoration: underline; color: red;\">\n\n`<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:1em;width:0.88em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:red;overflow:visible;position:relative;\"><path d=\"M438.6 105.4c12.5 12.5 12.5 32.8 0 45.3l-256 256c-12.5 12.5-32.8 12.5-45.3 0l-128-128c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0L160 338.7 393.4 105.4c12.5-12.5 32.8-12.5 45.3 0z\"/></svg>`{=html}Click to see a solution (try\nit yourself first!)\n\n</summary>\n\n</br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#vector with the row for the starting position of table 2\n\ntab2_row_start <- nrow(total_sample_tab)+3+3\n\ntab2_row_seq <- seq(from= nrow(total_sample_tab)+3+3, \n                    to=nrow(positivity_tab)+nrow(total_sample_tab)+3+3, \n                    by=1)\n\n\ntab2_dimres <- rowcol_to_dims(col = 1:ncol(positivity_tab)+1, #the columns are not affected\n                              row = tab2_row_seq)\n\n#get the first row and last row dimension of table 2 (The positivity table)\n\ntab2_dimtitle <- rowcol_to_dims(\n  col = 2, \n  row = tab2_row_start - 1)\n\ntab2_dimfirstrow<- rowcol_to_dims(\n  col =1:ncol(positivity_tab) + 1, \n  row=tab2_row_start)\n\ntab2_dimlastrow <- rowcol_to_dims(\n  col = 1:ncol(positivity_tab) + 1, \n  row  =nrow(positivity_tab) + tab2_row_start)\n\ntab2_dimbody_pct <- rowcol_to_dims(\n  col = 2:ncol(positivity_tab) + 1, \n  row = 1:nrow(positivity_tab) + tab2_row_start)\n```\n:::\n\n\n</br>\n\n</details>\n\nWe are getting there!, now that we have the ranges where we just need to\nformat it.\n\n### Step 4.2: Creating the table in MS Excel\n\nThe next step now is to start using the {openxlsx2} functions to:\n\n-   Add the tables\n\n-   Add the formatting/styles\n\n-   Save the workbook into a Excel file\n\n**Task**: Looking at the {openxlsx2} functions described in the section\n**Main functions** have a go at:\n\n-   Create a workbook object\n\n-   Add at least one worksheet\n\nBelow you have one possible solution that we propose\n\n<details>\n\n<summary style=\"text-decoration: underline; color: red;\">\n\n`<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:1em;width:0.88em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:red;overflow:visible;position:relative;\"><path d=\"M438.6 105.4c12.5 12.5 12.5 32.8 0 45.3l-256 256c-12.5 12.5-32.8 12.5-45.3 0l-128-128c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0L160 338.7 393.4 105.4c12.5-12.5 32.8-12.5 45.3 0z\"/></svg>`{=html}Click to see a solution (try\nit yourself first!)\n\n</summary>\n\n</br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwb_main <- wb_workbook(\"Laboratory_Data\") %>%                    #creating the workbook\n\nwb_add_worksheet(\"lab summary\",                                  #adding the first worksheet\n\ngridLines = FALSE,                                               #remove gridlines\n\ntabColor = \"red\") %>%                                            #tab color in the spreadsheet\n\nwb_add_data(x=\"Samples reported by month and year (All laboratories)\", #adding the title of table 1\n\nstart_col = 2,                                                   #title starting in col 2 or \"B\" \n\nstart_row = 2) %>%                                               #title starts in row 2 as well\n\nwb_merge_cells(rows=2,                                           #merging the row above Table 1\n\ncols = 1:ncol(total_sample_tab) + 1) %>%                         #column range of Table 1            \n \nwb_add_data(x=total_sample_tab, start_col  = 2,                  #data starts in column 2 and row 3\n\nstart_row =3 ) %>%\n\nwb_add_data(x=\"Sample positivity by month and year (All Laboratories)\", #add title of table 2\n            start_col = 2,\n            \n            start_row = tab2_row_start-1) %>%\n  \nwb_merge_cells(rows= tab2_row_start - 1, #merging the row above Table 2\n\ncols = 1:ncol(positivity_tab)+1) %>%\n\nwb_add_data(x=positivity_tab, start_col  = 2,\n\nstart_row =tab2_row_start, na.strings =\"-\" )\n\nwb_open(wb_main) # to see a preview\n```\n:::\n\n\n</br>\n\n</details>\n\nWe can see so far what we have, almost done!\n![](../images/openxlsx2_tut/icon5.png)\n\n### Step 4.3: Formatting the table\n\nNo we just need to format the table.\n\n**Task**: Format the table using the {openxlsx2} functions described in\nthe **Related to formatting** section.\n\nBelow is our proposed solution.\n\n<details>\n\n<summary style=\"text-decoration: underline; color: red;\">\n\n`<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:1em;width:0.88em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:red;overflow:visible;position:relative;\"><path d=\"M438.6 105.4c12.5 12.5 12.5 32.8 0 45.3l-256 256c-12.5 12.5-32.8 12.5-45.3 0l-128-128c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0L160 338.7 393.4 105.4c12.5-12.5 32.8-12.5 45.3 0z\"/></svg>`{=html}Click to see a solution (try\nit yourself first!)\n\n</summary>\n\n</br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwb_main_w_styles <- wb_main %>%\n  \n  wb_add_cell_style( 1, tab1_dimres,\n\n  vertical = \"center\",\n  \n  horizontal = \"center\",\n  \n  wrapText = 1) %>%\n  \n  wb_add_cell_style(1 , tab1_dimtitle,\n  \n  vertical = \"center\",\n  \n  horizontal = \"center\") %>% \n  \n  wb_add_border(1, tab1_dimfirstrow, \n                \n                top_border = \"thick\", \n                \n                top_color = wb_color(hex = \"000000\"),\n                \n                bottom_border = \"thick\", \n                \n                bottom_color = wb_color(hex = \"000000\"),\n                \n                inner_vgrid = \"none\",\n                \n                left_border=\"none\",\n                \n                right_border = \"none\") %>% \n    \n  wb_add_font(dims = tab1_dimfirstrow,\n              \n              bold = \"double\") %>% \n  \n  wb_add_font(dims = tab1_dimtitle,\n              \n              size=12,\n                \n              bold = \"double\") %>% \n  \n  wb_add_font(dims = tab1_dimlastrow,\n              \n              size=11,\n              \n              bold=\"dobule\") %>% \n  \n  wb_add_border(dims = tab1_dimlastrow,\n                \n                top_border = \"thick\",\n                \n                top_color = wb_color(hex = \"000000\"),\n                \n                inner_vgrid = \"none\",\n                \n                left_border=\"none\",\n                \n                right_border = \"none\",\n                \n                bottom_border = \"none\") %>% \n\n  wb_add_numfmt(dims = tab1_dimlastrow,\n                \n                numfmt = \"#,0\") %>% \n  \n  wb_add_numfmt(dims = rowcol_to_dims(row=1:nrow(total_sample_tab)+3,\n                                      col=ncol(total_sample_tab)+1),\n                \n                numfmt = \"#,0\") %>% \n  \n wb_set_col_widths(cols = 2, widths = 20) %>% \n  \n wb_set_row_heights(rows = c(2, 3,nrow(total_sample_tab)+3), heights = 30 )  %>%\n  \n  wb_add_cell_style(1, tab2_dimres,\n\n  vertical = \"center\",\n\n  horizontal = \"center\",\n\n  wrapText = 1) %>%\n\n  wb_add_cell_style(1, tab2_dimtitle,\n\n  vertical = \"center\",\n\n  horizontal = \"center\") %>% \n\n  wb_add_border(1, tab2_dimfirstrow, \n              \n              top_border = \"thick\", \n              \n              top_color = wb_color(hex = \"000000\"),\n              \n              bottom_border = \"thick\", \n              \n              bottom_color = wb_color(hex = \"000000\"),\n              \n              inner_vgrid = \"none\",\n              \n              left_border=\"none\",\n              \n              right_border = \"none\") %>% \n  \n  wb_add_font(dims=tab2_dimfirstrow,\n\n              bold=\"double\") %>%\n\n  wb_add_font(dims=tab2_dimtitle,\n\n              size=12,\n\n              bold=\"double\") %>%\n  \n  wb_add_border(dims = tab2_dimlastrow,\n\n                top_border = \"none\",\n\n                inner_vgrid = \"none\",\n\n                left_border=\"none\",\n\n                right_border = \"none\",\n\n                bottom_color = wb_color(hex = \"000000\"),\n\n                bottom_border = \"thick\") %>%\n  \n\n   \n  wb_add_numfmt(dims = tab2_dimbody_pct,\n\n                numfmt = \"#.0%\") %>%\n\n wb_set_col_widths(cols = 2, widths = 20) %>%\n\n wb_set_row_heights(rows = c(tab2_row_start-1,tab2_row_start,nrow\n                             (positivity_tab)+tab2_row_start), heights = 30 ) %>%\n \n  wb_open() # to open a temporary file \n```\n:::\n\n\n</br>\n\n</details>\n\nIf all functions and commands are correct, you should see something like\nthe following output:\n\n![The formated tables in Excel](../images/openxlsx2_tut/icon6.png)\n\n### Step 4.4: Exporting the table\n\nThe last step is to export the table and save it in our computer.\n\n**Task**: Using the function wb_save(), export the tables into your\nlocal computer\n\n<details>\n\n<summary style=\"text-decoration: underline; color: red;\">\n\n`<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 448 512\" style=\"height:1em;width:0.88em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:red;overflow:visible;position:relative;\"><path d=\"M438.6 105.4c12.5 12.5 12.5 32.8 0 45.3l-256 256c-12.5 12.5-32.8 12.5-45.3 0l-128-128c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0L160 338.7 393.4 105.4c12.5-12.5 32.8-12.5 45.3 0z\"/></svg>`{=html}Click to see a solution (try\nit yourself first!)\n\n</summary>\n\n</br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# save the output into an excel file\nwb_save(wb_main_w_styles, \"Lab_tables.xlsx\", overwrite = T) \n```\n:::\n\n\n</br>\n\n</details>\n\n<br>\n\nDepending on how complex your report is, you can add more worksheets.\nIteration (like using map() from purrr) could help you to automate\nseveral reports from different provinces or geographical units. Have a\nlook at the\n[Iteration](https://epirhandbook.com/new_pages/iteration.html) chapter\nof the EpiRhandbook if you want to explore this further.\n\n<br>\n\nThere are other great functions to add more details or expand the format\nof the tables, for example adding conditional format, or\n***sparklines***. This tutorial covers just the main functions and what\nis the most common task to add formats. For more in depth formatting,\nplease review the openxlsx2 following\n[vignette](https://janmarvin.github.io/openxlsx2/index.html \"Main page for openxls2 manual\")\n\nThanks for reading this tutorial!\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}